{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst AUTH_API = 'http://localhost:8080/api/auth/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isInitialized = false;\n    // Usar setTimeout para evitar problemas de inicialización\n    setTimeout(() => {\n      this.initializeAuth();\n    }, 0);\n  }\n  initializeAuth() {\n    try {\n      const storedUser = localStorage.getItem('user');\n      const storedToken = localStorage.getItem('token');\n      console.log('Inicializando AuthService...', {\n        hasUser: !!storedUser,\n        hasToken: !!storedToken\n      });\n      if (storedUser && storedToken) {\n        try {\n          const user = JSON.parse(storedUser);\n          // Verificar que el token no esté obviamente expirado\n          if (this.isTokenExpired(storedToken)) {\n            console.log('Token expirado detectado durante inicialización, limpiando sesión...');\n            this.clearAuthData();\n          } else {\n            console.log('Usuario válido encontrado, estableciendo sesión...');\n            this.currentUserSubject.next(user);\n          }\n        } catch (error) {\n          console.error('Error al parsear usuario almacenado:', error);\n          this.clearAuthData();\n        }\n      } else {\n        console.log('No hay datos de sesión almacenados');\n      }\n    } catch (error) {\n      console.error('Error durante inicialización:', error);\n    } finally {\n      this.isInitialized = true;\n      console.log('AuthService inicializado');\n    }\n  }\n  isTokenExpired(token) {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const now = Math.floor(Date.now() / 1000);\n      const isExpired = payload.exp < now;\n      console.log('Verificando expiración del token:', {\n        exp: payload.exp,\n        now,\n        isExpired\n      });\n      return isExpired;\n    } catch (error) {\n      console.error('Error al validar token:', error);\n      return true; // Si no se puede validar, considerarlo expirado\n    }\n  }\n  clearAuthData() {\n    console.log('Limpiando datos de autenticación...');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n  login(credentials) {\n    return this.http.post(AUTH_API + 'login', credentials, httpOptions).pipe(tap(response => {\n      console.log('Login exitoso, guardando datos...');\n      this.saveToken(response.token);\n      const user = {\n        id: response.id,\n        email: response.email,\n        firstName: response.firstName,\n        lastName: response.lastName,\n        emailVerified: response.emailVerified\n      };\n      this.saveUser(user);\n      this.currentUserSubject.next(user);\n    }));\n  }\n  register(userData) {\n    return this.http.post(AUTH_API + 'register', userData, httpOptions);\n  }\n  verifyEmail(token) {\n    return this.http.get(AUTH_API + 'verify-email?token=' + token);\n  }\n  logout() {\n    console.log('Cerrando sesión...');\n    this.clearAuthData();\n  }\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  saveUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  getUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    const user = this.currentUserSubject.value;\n    console.log('Verificando estado de login:', {\n      hasToken: !!token,\n      hasUser: !!user,\n      isInitialized: this.isInitialized\n    });\n    // Si no está inicializado, considerarlo como no logueado\n    if (!this.isInitialized) {\n      console.log('AuthService no inicializado aún');\n      return false;\n    }\n    // Verificar que existe token, usuario en memoria, y que el token no esté expirado\n    if (!token || !user) {\n      console.log('No hay token o usuario');\n      return false;\n    }\n    if (this.isTokenExpired(token)) {\n      console.log('Token expirado, limpiando sesión...');\n      this.clearAuthData();\n      return false;\n    }\n    console.log('Usuario autenticado correctamente');\n    return true;\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isAuthInitialized() {\n    return this.isInitialized;\n  }\n  // Función de debug para limpiar datos corruptos\n  debugClearAll() {\n    console.log('DEBUG: Limpiando todos los datos de localStorage...');\n    localStorage.clear();\n    this.currentUserSubject.next(null);\n    this.isInitialized = false;\n    setTimeout(() => {\n      this.initializeAuth();\n    }, 100);\n  }\n  // Función de debug para mostrar estado actual\n  debugShowState() {\n    console.log('DEBUG: Estado actual del AuthService:', {\n      isInitialized: this.isInitialized,\n      currentUser: this.currentUserSubject.value,\n      token: this.getToken(),\n      storedUser: localStorage.getItem('user'),\n      isLoggedIn: this.isLoggedIn()\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","tap","AUTH_API","httpOptions","headers","AuthService","constructor","http","currentUserSubject","currentUser$","asObservable","isInitialized","setTimeout","initializeAuth","storedUser","localStorage","getItem","storedToken","console","log","hasUser","hasToken","user","JSON","parse","isTokenExpired","clearAuthData","next","error","token","payload","atob","split","now","Math","floor","Date","isExpired","exp","removeItem","login","credentials","post","pipe","response","saveToken","id","email","firstName","lastName","emailVerified","saveUser","register","userData","verifyEmail","get","logout","setItem","getToken","stringify","getUser","isLoggedIn","value","getCurrentUser","isAuthInitialized","debugClearAll","clear","debugShowState","currentUser","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/deneb/Documentos/LandingPage/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, BehaviorSubject, tap } from 'rxjs';\nimport { \n  LoginRequest, \n  RegisterRequest, \n  AuthResponse, \n  MessageResponse, \n  User \n} from '../models/user.model';\n\nconst AUTH_API = 'http://localhost:8080/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n  private isInitialized = false;\n\n  constructor(private http: HttpClient) {\n    // Usar setTimeout para evitar problemas de inicialización\n    setTimeout(() => {\n      this.initializeAuth();\n    }, 0);\n  }\n\n  private initializeAuth(): void {\n    try {\n      const storedUser = localStorage.getItem('user');\n      const storedToken = localStorage.getItem('token');\n      \n      console.log('Inicializando AuthService...', { hasUser: !!storedUser, hasToken: !!storedToken });\n      \n      if (storedUser && storedToken) {\n        try {\n          const user = JSON.parse(storedUser);\n          // Verificar que el token no esté obviamente expirado\n          if (this.isTokenExpired(storedToken)) {\n            console.log('Token expirado detectado durante inicialización, limpiando sesión...');\n            this.clearAuthData();\n          } else {\n            console.log('Usuario válido encontrado, estableciendo sesión...');\n            this.currentUserSubject.next(user);\n          }\n        } catch (error) {\n          console.error('Error al parsear usuario almacenado:', error);\n          this.clearAuthData();\n        }\n      } else {\n        console.log('No hay datos de sesión almacenados');\n      }\n    } catch (error) {\n      console.error('Error durante inicialización:', error);\n    } finally {\n      this.isInitialized = true;\n      console.log('AuthService inicializado');\n    }\n  }\n\n  private isTokenExpired(token: string): boolean {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const now = Math.floor(Date.now() / 1000);\n      const isExpired = payload.exp < now;\n      console.log('Verificando expiración del token:', { exp: payload.exp, now, isExpired });\n      return isExpired;\n    } catch (error) {\n      console.error('Error al validar token:', error);\n      return true; // Si no se puede validar, considerarlo expirado\n    }\n  }\n\n  private clearAuthData(): void {\n    console.log('Limpiando datos de autenticación...');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n  }\n\n  login(credentials: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(AUTH_API + 'login', credentials, httpOptions)\n      .pipe(\n        tap(response => {\n          console.log('Login exitoso, guardando datos...');\n          this.saveToken(response.token);\n          const user: User = {\n            id: response.id,\n            email: response.email,\n            firstName: response.firstName,\n            lastName: response.lastName,\n            emailVerified: response.emailVerified\n          };\n          this.saveUser(user);\n          this.currentUserSubject.next(user);\n        })\n      );\n  }\n\n  register(userData: RegisterRequest): Observable<MessageResponse> {\n    return this.http.post<MessageResponse>(AUTH_API + 'register', userData, httpOptions);\n  }\n\n  verifyEmail(token: string): Observable<MessageResponse> {\n    return this.http.get<MessageResponse>(AUTH_API + 'verify-email?token=' + token);\n  }\n\n  logout(): void {\n    console.log('Cerrando sesión...');\n    this.clearAuthData();\n  }\n\n  public saveToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  public getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  public saveUser(user: User): void {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  public getUser(): User | null {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  public isLoggedIn(): boolean {\n    const token = this.getToken();\n    const user = this.currentUserSubject.value;\n    \n    console.log('Verificando estado de login:', { hasToken: !!token, hasUser: !!user, isInitialized: this.isInitialized });\n    \n    // Si no está inicializado, considerarlo como no logueado\n    if (!this.isInitialized) {\n      console.log('AuthService no inicializado aún');\n      return false;\n    }\n    \n    // Verificar que existe token, usuario en memoria, y que el token no esté expirado\n    if (!token || !user) {\n      console.log('No hay token o usuario');\n      return false;\n    }\n    \n    if (this.isTokenExpired(token)) {\n      console.log('Token expirado, limpiando sesión...');\n      this.clearAuthData();\n      return false;\n    }\n    \n    console.log('Usuario autenticado correctamente');\n    return true;\n  }\n\n  public getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  public isAuthInitialized(): boolean {\n    return this.isInitialized;\n  }\n\n  // Función de debug para limpiar datos corruptos\n  public debugClearAll(): void {\n    console.log('DEBUG: Limpiando todos los datos de localStorage...');\n    localStorage.clear();\n    this.currentUserSubject.next(null);\n    this.isInitialized = false;\n    setTimeout(() => {\n      this.initializeAuth();\n    }, 100);\n  }\n\n  // Función de debug para mostrar estado actual\n  public debugShowState(): void {\n    console.log('DEBUG: Estado actual del AuthService:', {\n      isInitialized: this.isInitialized,\n      currentUser: this.currentUserSubject.value,\n      token: this.getToken(),\n      storedUser: localStorage.getItem('user'),\n      isLoggedIn: this.isLoggedIn()\n    });\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}