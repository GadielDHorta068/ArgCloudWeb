{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst AUTH_API = 'http://localhost:8080/api/auth/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n/**\n * Servicio para gestionar la autenticación de usuarios.\n * Proporciona métodos para el inicio de sesión, registro, cierre de sesión,\n * y manejo de la información del usuario y el token JWT.\n */\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(null);\n      /** Observable que emite la información del usuario actual. */\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.isInitialized = false;\n      this.initializeAuth();\n    }\n    /**\n     * Inicializa el estado de autenticación al cargar el servicio,\n     * comprobando si hay un usuario y un token en el almacenamiento local.\n     */\n    initializeAuth() {\n      const storedUser = localStorage.getItem('user');\n      const storedToken = localStorage.getItem('token');\n      if (storedUser && storedToken) {\n        try {\n          const user = JSON.parse(storedUser);\n          // Verificar que el token no esté obviamente expirado\n          if (this.isTokenExpired(storedToken)) {\n            console.log('Token expirado detectado, limpiando sesión...');\n            this.clearAuthData();\n          } else {\n            this.currentUserSubject.next(user);\n          }\n        } catch (error) {\n          console.error('Error al parsear usuario almacenado:', error);\n          this.clearAuthData();\n        }\n      }\n      this.isInitialized = true;\n    }\n    /**\n     * Comprueba si un token JWT ha expirado.\n     * @param token El token JWT a verificar.\n     * @returns `true` si el token ha expirado, `false` en caso contrario.\n     */\n    isTokenExpired(token) {\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const now = Math.floor(Date.now() / 1000);\n        return payload.exp < now;\n      } catch (error) {\n        console.error('Error al validar token:', error);\n        return true; // Si no se puede validar, considerarlo expirado\n      }\n    }\n    /**\n     * Limpia los datos de autenticación del almacenamiento local y del estado del servicio.\n     */\n    clearAuthData() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.currentUserSubject.next(null);\n    }\n    /**\n     * Envía una solicitud de inicio de sesión al backend.\n     * @param credentials Las credenciales de inicio de sesión del usuario.\n     * @returns Un Observable con la respuesta de autenticación.\n     */\n    login(credentials) {\n      return this.http.post(AUTH_API + 'login', credentials, httpOptions).pipe(tap(response => {\n        this.saveToken(response.token);\n        const user = {\n          id: response.id,\n          email: response.email,\n          firstName: response.firstName,\n          lastName: response.lastName,\n          emailVerified: response.emailVerified\n        };\n        this.saveUser(user);\n        this.currentUserSubject.next(user);\n      }));\n    }\n    /**\n     * Envía una solicitud de registro de un nuevo usuario al backend.\n     * @param userData Los datos del usuario a registrar.\n     * @returns Un Observable con la respuesta del mensaje.\n     */\n    register(userData) {\n      return this.http.post(AUTH_API + 'register', userData, httpOptions);\n    }\n    /**\n     * Envía una solicitud para verificar un correo electrónico a través de un token.\n     * @param token El token de verificación.\n     * @returns Un Observable con la respuesta del mensaje.\n     */\n    verifyEmail(token) {\n      return this.http.get(AUTH_API + 'verify-email?token=' + token);\n    }\n    /**\n     * Cierra la sesión del usuario actual.\n     */\n    logout() {\n      this.clearAuthData();\n    }\n    /**\n     * Guarda el token JWT en el almacenamiento local.\n     * @param token El token a guardar.\n     */\n    saveToken(token) {\n      localStorage.setItem('token', token);\n    }\n    /**\n     * Obtiene el token JWT del almacenamiento local.\n     * @returns El token JWT o `null` si no se encuentra.\n     */\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    /**\n     * Guarda la información del usuario en el almacenamiento local.\n     * @param user El objeto de usuario a guardar.\n     */\n    saveUser(user) {\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    /**\n     * Obtiene la información del usuario del almacenamiento local.\n     * @returns El objeto de usuario o `null` si no se encuentra.\n     */\n    getUser() {\n      const user = localStorage.getItem('user');\n      return user ? JSON.parse(user) : null;\n    }\n    /**\n     * Comprueba si el usuario está actualmente autenticado.\n     * @returns `true` si el usuario tiene una sesión activa y un token válido, `false` en caso contrario.\n     */\n    isLoggedIn() {\n      const token = this.getToken();\n      const user = this.currentUserSubject.value;\n      // Verificar que existe token, usuario en memoria, y que el token no esté expirado\n      if (!token || !user) {\n        return false;\n      }\n      if (this.isTokenExpired(token)) {\n        console.log('Token expirado, limpiando sesión...');\n        this.clearAuthData();\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Obtiene el usuario actualmente autenticado desde el BehaviorSubject.\n     * @returns El usuario actual o `null` si no hay nadie autenticado.\n     */\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    /**\n     * Comprueba si el servicio de autenticación ha terminado su inicialización.\n     * @returns `true` si la inicialización ha finalizado.\n     */\n    isAuthInitialized() {\n      return this.isInitialized;\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}