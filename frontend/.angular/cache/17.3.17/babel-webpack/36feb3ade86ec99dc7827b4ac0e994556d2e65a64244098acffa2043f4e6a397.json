{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\n/**\n * Interceptor HTTP que adjunta el token de autenticación a las solicitudes\n * y maneja los errores de autenticación (401 Unauthorized).\n */\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    /**\n     * Intercepta las solicitudes HTTP salientes para añadir el token JWT\n     * en la cabecera de autorización. Si se recibe un error 401,\n     * se cierra la sesión del usuario y se le redirige al login.\n     * @param req La solicitud HTTP saliente.\n     * @param next El siguiente manejador de la cadena de interceptores.\n     * @returns Un Observable del evento HTTP.\n     */\n    intercept(req, next) {\n      // Agregar token a todas las requests si existe\n      const token = this.authService.getToken();\n      if (token) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n      return next.handle(req).pipe(catchError(error => {\n        // Si recibimos 401, el token es inválido\n        if (error.status === 401) {\n          console.log('Token expirado o inválido, limpiando sesión...');\n          this.authService.logout();\n          this.router.navigate(['/login']);\n        }\n        return throwError(() => error);\n      }));\n    }\n    static {\n      this.ɵfac = function AuthInterceptor_Factory(t) {\n        return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthInterceptor,\n        factory: AuthInterceptor.ɵfac\n      });\n    }\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}