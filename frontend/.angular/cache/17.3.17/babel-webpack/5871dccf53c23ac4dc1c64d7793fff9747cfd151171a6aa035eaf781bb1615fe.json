{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n/**\n * Componente del panel de control del usuario.\n * Muestra información de la cuenta, estadísticas (actualmente placeholders)\n * y una sección para la gestión de máquinas virtuales.\n */\nlet DashboardComponent = class DashboardComponent {\n  constructor(authService, http) {\n    this.authService = authService;\n    this.http = http;\n    /** El usuario actualmente autenticado. */\n    this.currentUser = null;\n    this.virtualMachines = [];\n    this.selectedMachine = null;\n  }\n  /**\n   * Método del ciclo de vida de Angular. Se ejecuta al inicializar el componente.\n   * Obtiene la información del usuario actual y solicita los datos del dashboard al backend.\n   */\n  ngOnInit() {\n    this.currentUser = this.authService.getUser();\n    // Obtener mensaje de bienvenida del backend\n    this.getDashboardData();\n    this.loadVirtualMachines();\n  }\n  /**\n   * Carga una lista de máquinas virtuales de prueba.\n   * En una implementación real, esto vendría de una API.\n   */\n  loadVirtualMachines() {\n    this.virtualMachines = [{\n      id: 1,\n      name: 'Servidor Web (Ubuntu)',\n      status: 'running',\n      os: 'Ubuntu 22.04',\n      cpu: 2,\n      memory: 2048,\n      disk: 50\n    }, {\n      id: 2,\n      name: 'Base de Datos (Debian)',\n      status: 'stopped',\n      os: 'Debian 11',\n      cpu: 4,\n      memory: 4096,\n      disk: 100\n    }, {\n      id: 3,\n      name: 'Entorno de tu vieja (Fedora)',\n      status: 'running',\n      os: 'Fedora 38',\n      cpu: 8,\n      memory: 16384,\n      disk: 250\n    }];\n  }\n  /**\n   * Selecciona una máquina virtual para ver sus detalles.\n   * @param machine La máquina virtual seleccionada.\n   */\n  selectMachine(machine) {\n    this.selectedMachine = machine;\n  }\n  /** Vuelve a la lista de máquinas virtuales. */\n  deselectMachine() {\n    this.selectedMachine = null;\n  }\n  /**\n   * Crea una nueva máquina virtual (simulado).\n   * En una implementación real, esto abriría un formulario o llamaría a una API.\n   */\n  createNewVM() {\n    // Lógica simulada para añadir una nueva VM\n    const newId = this.virtualMachines.length > 0 ? Math.max(...this.virtualMachines.map(vm => vm.id)) + 1 : 1;\n    const newVM = {\n      id: newId,\n      name: `Nueva VM ${newId} (Pendiente)`,\n      status: 'stopped',\n      os: 'Desconocido',\n      cpu: 1,\n      memory: 1024,\n      disk: 20\n    };\n    this.virtualMachines.push(newVM);\n    this.selectMachine(newVM);\n  }\n  /**\n   * Inicia una máquina virtual (simulado).\n   * @param vm La máquina virtual a iniciar.\n   */\n  startVM(vm) {\n    console.log(`Iniciando ${vm.name}...`);\n    vm.status = 'running';\n  }\n  /**\n   * Reinicia una máquina virtual (simulado).\n   * @param vm La máquina virtual a reiniciar.\n   */\n  restartVM(vm) {\n    console.log(`Reiniciando ${vm.name}...`);\n    vm.status = 'restarting';\n    setTimeout(() => {\n      vm.status = 'running';\n      console.log(`${vm.name} reiniciada.`);\n    }, 3000); // Simular tiempo de reinicio\n  }\n  /**\n   * Detiene una máquina virtual (simulado).\n   * @param vm La máquina virtual a detener.\n   */\n  stopVM(vm) {\n    console.log(`Deteniendo ${vm.name}...`);\n    vm.status = 'stopped';\n  }\n  /**\n   * Abre la consola de la máquina virtual (simulado).\n   * @param vm La máquina virtual para la que se abrirá la consola.\n   */\n  openConsole(vm) {\n    console.log(`Abriendo consola para ${vm.name}...`);\n    // En una implementación real, esto podría navegar a una nueva ruta\n    // o abrir un modal con un componente de terminal (ej. ngx-terminal).\n    alert(`Consola para ${vm.name} (simulado)`);\n  }\n  /**\n   * Abre la conexión FTP para la máquina virtual (simulado).\n   * @param vm La máquina virtual para la que se abrirá la conexión FTP.\n   */\n  openFTP(vm) {\n    console.log(`Abriendo FTP para ${vm.name}...`);\n    // Esto podría abrir un enlace ftp:// o mostrar detalles de conexión.\n    alert(`FTP para ${vm.name} (simulado)`);\n  }\n  /**\n   * Obtiene datos del backend para el dashboard.\n   * Actualmente solo solicita un mensaje de bienvenida.\n   */\n  getDashboardData() {\n    // El interceptor agregará automáticamente el token Bearer\n    this.http.get('http://localhost:8080/api/dashboard/welcome').subscribe({\n      next: response => {\n        console.log('Dashboard data:', response);\n      },\n      error: error => {\n        console.error('Error fetching dashboard data:', error);\n        // El interceptor manejará automáticamente los errores 401\n      }\n    });\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}